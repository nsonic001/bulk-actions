#!/usr/bin/env node


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}

if (process.env.NODE_ENV != null && process.env.NODE_ENV != undefined && process.env.NODE_ENV === 'production') {
  nr = require('newrelic');
  console.log(nr);
}
//console.log(process.env.NODE_ENV);

/**
 * Module dependencies.
 */
if (process.env.NODE_ENV !== 'maintenance') {
  var app = require('../server');
  var debug = require('debug')('myapp:server');
  var http = require('http');

  var port = normalizePort(global.config.port || '4000');
  /**
   * Get port from environment and store in Express.
   */

  app.set('port', port);

  /**
   * Create HTTP & Maintenance server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  // console.log(maintenance);

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);


} else {
  var server = require('./maintenance');
  server.listen(port);
}